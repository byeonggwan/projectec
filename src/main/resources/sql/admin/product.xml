<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.ecommerce.projectec.product.ProductMapper">
    <!--상세 페이지에서 사용되는 Product DTO-->
    <resultMap id="productDetailResultMap" type="com.ecommerce.projectec.product.ProductDetailDTO">
        <result property="productId" column="PRODUCT_ID" />
        <result property="productName" column="PRODUCT_NAME" />
        <result property="productPrice" column="PRODUCT_PRICE" />
        <result property="productStock" column="PRODUCT_STOCK" />
        <result property="productDesc" column="PRODUCT_DESC" />
        <result property="productDiscount" column="PRODUCT_DISCOUNT" />
        <result property="productStatus" column="PRODUCT_STATUS" />
        <result property="productImageUrl" column="IMAGE_URL" />
        <result property="productLiked" column="LIKED" />
    </resultMap>

    <insert id="insert" parameterType="HashMap" useGeneratedKeys="true" keyProperty="PRODUCT_ID">
        INSERT INTO PRODUCT(CATEGORY_ID, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STOCK, PRODUCT_DESC, PRODUCT_DISCOUNT)
        SELECT CATEGORY_ID, #{PRODUCT_NAME}, #{PRODUCT_PRICE}, #{PRODUCT_STOCK}, #{PRODUCT_DESC}, #{PRODUCT_DISCOUNT}
        FROM CATEGORY
        WHERE CATEGORY_NAME = #{CATEGORY_NAME}
    </insert>
    <!--category와 status를 받아서 동적쿼리로 결과를 반환. 보안상 약점있는지 확인 필요-->
    <select id="selectByCatAndStat" resultType="HashMap">
        SELECT *
        FROM PRODUCT P
            JOIN CATEGORY C
            ON P.CATEGORY_ID = C.CATEGORY_ID
        <where>
            <if test="CATEGORY_ID != null">
                AND P.CATEGORY_ID = #{CATEGORY_ID}
            </if>
            <if test="STATUS != null">
                AND P.PRODUCT_STATUS = #{STATUS}
            </if>
        </where>
        ORDER BY P.PRODUCT_ID DESC
    </select>
    <select id="selectCategory" resultType="HashMap">
        SELECT *
        FROM CATEGORY
        ORDER BY CATEGORY_ID ASC
    </select>

    <update id="updateStatById" parameterType="HashMap">
        UPDATE PRODUCT
        SET PRODUCT_STATUS=#{PRODUCT_STATUS}
        WHERE PRODUCT_ID = #{PRODUCT_ID}
    </update>

    <!--
    INDEX 페이지에서 물건이 보이도록 하는 코드
    이미지가 없거나, status가 1이 아닌 것들은 추출되지 않음
    -->
    <select id="selectByCatWithThumb" parameterType="HashMap">
        SELECT P.PRODUCT_ID,
               P.PRODUCT_NAME,
               P.PRODUCT_PRICE,
               P.PRODUCT_STOCK,
               P.PRODUCT_DISCOUNT,
               I.IMAGE_URL,
               CASE WHEN L.USER_ID_NO IS NOT NULL THEN 1 ELSE 0 END AS LIKED
        FROM PRODUCT P
            JOIN (
                SELECT PRODUCT_ID, MIN(IMAGE_ID) AS MIN_IMAGE_ID
                FROM IMAGE
                GROUP BY PRODUCT_ID
            ) I2 ON P.PRODUCT_ID = I2.PRODUCT_ID
            JOIN IMAGE I ON I.IMAGE_ID = I2.MIN_IMAGE_ID
            LEFT JOIN `LIKE` L ON P.PRODUCT_ID = L.PRODUCT_ID AND L.USER_ID_NO = #{USER_ID_NO}
        <where>
            <if test="CATEGORY_ID != null">
                P.CATEGORY_ID = #{CATEGORY_ID}
            </if>
        </where>
        AND P.PRODUCT_STATUS = 1
        ORDER BY P.PRODUCT_ID DESC
    </select>

    <!--detail product DTO-->
    <select id="selectDtoById" resultMap="productDetailResultMap">
        SELECT P.PRODUCT_ID,
               P.PRODUCT_NAME,
               P.PRODUCT_PRICE,
               P.PRODUCT_STOCK,
               P.PRODUCT_DESC,
               P.PRODUCT_DISCOUNT,
               P.PRODUCT_STATUS,
               I.IMAGE_URL,
               CASE WHEN L.USER_ID_NO IS NOT NULL THEN 1 ELSE 0 END AS LIKED
        FROM PRODUCT P
            JOIN IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
            LEFT JOIN `LIKE` L ON P.PRODUCT_ID = L.PRODUCT_ID AND L.USER_ID_NO = #{USER_ID_NO}
        WHERE P.PRODUCT_ID = #{PRODUCT_ID}

        AND I.IMAGE_ID = (
            SELECT MIN(IMAGE_ID)
            FROM IMAGE
            WHERE PRODUCT_ID = P.PRODUCT_ID
        )
    </select>

    <select id="selectByIds" resultType="HashMap">
        SELECT P.PRODUCT_ID,
               P.PRODUCT_NAME,
               P.PRODUCT_PRICE,
               P.PRODUCT_STOCK,
               P.PRODUCT_DISCOUNT,
               I.IMAGE_URL
        FROM PRODUCT P
            JOIN IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
        WHERE P.PRODUCT_ID IN
        <foreach collection="PRODUCT_IDS" item="productId" open="(" separator="," close=")">
            #{productId}
        </foreach>
        AND I.IMAGE_ID = (
            SELECT MIN(IMAGE_ID)
            FROM IMAGE
            WHERE PRODUCT_ID = P.PRODUCT_ID
        )
    </select>

</mapper>